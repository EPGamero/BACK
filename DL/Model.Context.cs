//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExamenTrupperEntities : DbContext
    {
        public ExamenTrupperEntities()
            : base("name=ExamenTrupperEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Pedido> Pedido { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Pedido_Detalle> Pedido_Detalle { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> AddCliente(string nombre, string aPaterno, string aMaterno)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var aPaternoParameter = aPaterno != null ?
                new ObjectParameter("APaterno", aPaterno) :
                new ObjectParameter("APaterno", typeof(string));
    
            var aMaternoParameter = aMaterno != null ?
                new ObjectParameter("AMaterno", aMaterno) :
                new ObjectParameter("AMaterno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddCliente", nombreParameter, aPaternoParameter, aMaternoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> AddPedido(Nullable<int> cliente, Nullable<decimal> montoPedido)
        {
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(int));
    
            var montoPedidoParameter = montoPedido.HasValue ?
                new ObjectParameter("MontoPedido", montoPedido) :
                new ObjectParameter("MontoPedido", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddPedido", clienteParameter, montoPedidoParameter);
        }
    
        public virtual int AddPedidoDetalle(Nullable<int> pedidoId, Nullable<int> sKU, Nullable<int> cantidad)
        {
            var pedidoIdParameter = pedidoId.HasValue ?
                new ObjectParameter("PedidoId", pedidoId) :
                new ObjectParameter("PedidoId", typeof(int));
    
            var sKUParameter = sKU.HasValue ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPedidoDetalle", pedidoIdParameter, sKUParameter, cantidadParameter);
        }
    
        public virtual int DeletePedidoById(Nullable<int> pedidoId)
        {
            var pedidoIdParameter = pedidoId.HasValue ?
                new ObjectParameter("pedidoId", pedidoId) :
                new ObjectParameter("pedidoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePedidoById", pedidoIdParameter);
        }
    
        public virtual int DeletePedidoDetalleById(Nullable<int> pedidoId)
        {
            var pedidoIdParameter = pedidoId.HasValue ?
                new ObjectParameter("pedidoId", pedidoId) :
                new ObjectParameter("pedidoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePedidoDetalleById", pedidoIdParameter);
        }
    
        public virtual ObjectResult<GetPedidoById_Result> GetPedidoById(Nullable<int> pedidoId)
        {
            var pedidoIdParameter = pedidoId.HasValue ?
                new ObjectParameter("pedidoId", pedidoId) :
                new ObjectParameter("pedidoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPedidoById_Result>("GetPedidoById", pedidoIdParameter);
        }
    
        public virtual ObjectResult<GetProductos_Result> GetProductos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductos_Result>("GetProductos");
        }
    }
}
